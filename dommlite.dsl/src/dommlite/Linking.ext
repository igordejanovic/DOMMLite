import dommlite;

extension dommlite::Extensions;
extension dommlite::GenLinking reexport;
extension org::openarchitectureware::xtext::parser::LinkerUtils;
extension org::openarchitectureware::util::stdlib::io;

/*
 * If you need more sophisticated linking semantic just overwrite the linking extensions here and add your own logic.
 * Have a look at the generated dommlite::GenLinking (typically located in src-gen)
 */

 Void link_type(dommlite::Property this) :
//	this.name.syserr()->
	injectBuildIns(this)->
	(let ents = this.allElements().typeSelect(dommlite::Classifier) :

		this.setType(ents.select(e|e.id() == this.parsedString("type")).first())
);

Void link_type(dommlite::Parameter this) :
//	this.name.syserr()->
	injectBuildIns(this)->
	(let ents = this.allElements().typeSelect(dommlite::Classifier) :

		this.setType(ents.select(e|e.id() == this.parsedString("type")).first())
);

Void link_type(dommlite::Operation this) :
//	this.name.syserr()->
	injectBuildIns(this)->
	(let ents = this.allElements().typeSelect(dommlite::Classifier) :

		this.setType(ents.select(e|e.id() == this.parsedString("type")).first())
);

Void link_paramValue(dommlite::ConstraintRefParameter this) :
	(let ents = this.containingClassifier().eAllContents.typeSelect(dommlite::Property) :

		this.setParamValue(ents.select(e|e.id() == this.parsedString("paramValue")).first())
);


Void link_type(dommlite::ConstraintSpec this) :
	injectBuildIns(this)->
	(let ents = this.allElements().typeSelect(dommlite::ConstraintType) :
 
		this.setType(ents.select(e|e.id() == this.parsedString("type")).first())
);

Void link_oppositeEnd(dommlite::Property this) :
	link_type()->
	!Entity.isAssignableFrom(type.metaType) ?
	null:
	(	
		(let ents = ((Entity)this.type).allPropertiesWithKeyFields().select(e|e.id() == this.parsedString("oppositeEnd")).first() :
			(ents.parsedString("type") == this.containingClassifier().name ?
			this.setOppositeEnd(ents) : null)
		)
	) 
;

 